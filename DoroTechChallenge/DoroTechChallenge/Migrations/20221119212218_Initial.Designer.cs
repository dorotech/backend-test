// <auto-generated />
using DoroTechChallenge.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoroTechChallenge.Migrations
{
    [DbContext(typeof(DoroTechContext))]
    [Migration("20221119212218_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoroTechChallenge.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID_AUTOR");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("NOME_AUTOR");

                    b.HasKey("Id");

                    b.ToTable("TAB_AUTORES", (string)null);
                });

            modelBuilder.Entity("DoroTechChallenge.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID_LIVRO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("INT")
                        .HasColumnName("ID_AUTOR");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("DESCRICACO");

                    b.Property<int>("GenreId")
                        .HasColumnType("INT")
                        .HasColumnName("ID_GENERO");

                    b.Property<string>("PublishedAt")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("DATA_PUBLICACAO");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("TITULO");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("TAB_LIVROS", (string)null);
                });

            modelBuilder.Entity("DoroTechChallenge.Models.BookPublishingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID_LIVRO_EDITORA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("INT")
                        .HasColumnName("ID_LIVRO");

                    b.Property<int>("PublishingCompanyId")
                        .HasColumnType("INT")
                        .HasColumnName("ID_EDITORA");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PublishingCompanyId");

                    b.ToTable("TAB_LIVRO_EDITORA", (string)null);
                });

            modelBuilder.Entity("DoroTechChallenge.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID_GENERO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("NOME_GENERO");

                    b.HasKey("Id");

                    b.ToTable("TAB_GENEROS", (string)null);
                });

            modelBuilder.Entity("DoroTechChallenge.Models.PublishingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("ID_EDITORA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("NOME_EDITORA");

                    b.HasKey("Id");

                    b.ToTable("TAB_EDITORA", (string)null);
                });

            modelBuilder.Entity("DoroTechChallenge.Models.Book", b =>
                {
                    b.HasOne("DoroTechChallenge.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoroTechChallenge.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DoroTechChallenge.Models.BookPublishingCompany", b =>
                {
                    b.HasOne("DoroTechChallenge.Models.Book", "Book")
                        .WithMany("BookPublishingCompany")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoroTechChallenge.Models.PublishingCompany", "PublishingCompany")
                        .WithMany("BookPublishingCompany")
                        .HasForeignKey("PublishingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("PublishingCompany");
                });

            modelBuilder.Entity("DoroTechChallenge.Models.Book", b =>
                {
                    b.Navigation("BookPublishingCompany");
                });

            modelBuilder.Entity("DoroTechChallenge.Models.PublishingCompany", b =>
                {
                    b.Navigation("BookPublishingCompany");
                });
#pragma warning restore 612, 618
        }
    }
}
